["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat8;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_1.xyz = _SColor.www * u_xlat16_1.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + _HColor.xyz;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz = u_xlat3.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat3.x = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat3.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat3.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat3.x = u_xlat3.x * u_xlat16_0.x;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat3.x = u_xlat3.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat8 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat8 = float(1.0) / u_xlat8;\n    u_xlat3.x = u_xlat8 * u_xlat3.x;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat8 = u_xlat3.x * -2.0 + 3.0;\n    u_xlat3.x = u_xlat3.x * u_xlat3.x;\n    u_xlat3.x = u_xlat3.x * u_xlat8;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_2.xyz = (-u_xlat10_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat8;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_1.xyz = _SColor.www * u_xlat16_1.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + _HColor.xyz;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz = u_xlat3.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat3.x = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat3.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat3.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat3.x = u_xlat3.x * u_xlat16_0.x;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat3.x = u_xlat3.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat8 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat8 = float(1.0) / u_xlat8;\n    u_xlat3.x = u_xlat8 * u_xlat3.x;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat8 = u_xlat3.x * -2.0 + 3.0;\n    u_xlat3.x = u_xlat3.x * u_xlat3.x;\n    u_xlat3.x = u_xlat3.x * u_xlat8;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat8;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_1.xyz = _SColor.www * u_xlat16_1.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + _HColor.xyz;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz = u_xlat3.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat3.x = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat3.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat3.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat3.x = u_xlat3.x * u_xlat16_0.x;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat3.x = u_xlat3.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat8 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat8 = float(1.0) / u_xlat8;\n    u_xlat3.x = u_xlat8 * u_xlat3.x;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat8 = u_xlat3.x * -2.0 + 3.0;\n    u_xlat3.x = u_xlat3.x * u_xlat3.x;\n    u_xlat3.x = u_xlat3.x * u_xlat8;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_2.xyz = (-u_xlat10_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_2.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat4.xyz + u_xlat3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump vec4 _SColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat8;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = (-_HColor.xyz) + _SColor.xyz;\n    u_xlat16_1.xyz = _SColor.www * u_xlat16_1.xyz + _HColor.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_1.xyz) + _HColor.xyz;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * u_xlat16_2.xyz + u_xlat16_1.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat16_2.xyz = u_xlat3.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * u_xlat3.xyz;\n    u_xlat3.x = dot(u_xlat3.xyz, vs_TEXCOORD1.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat3.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat3.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_2.xyz = vec3(u_xlat16_16) * u_xlat16_2.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_2.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat3.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat3.x = u_xlat3.x * u_xlat16_0.x;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat3.x = u_xlat3.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat8 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat8 = float(1.0) / u_xlat8;\n    u_xlat3.x = u_xlat8 * u_xlat3.x;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat8 = u_xlat3.x * -2.0 + 3.0;\n    u_xlat3.x = u_xlat3.x * u_xlat3.x;\n    u_xlat3.x = u_xlat3.x * u_xlat8;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat3.xyz = u_xlat3.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * u_xlat16_1.xyz + u_xlat3.xyz;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_2.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_2.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat4.xyz + u_xlat3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nlowp vec3 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat7;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * _HColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat17) + _WorldSpaceLightPos0.xyz;\n    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat2.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat2.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat2.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat2.x = u_xlat2.x * u_xlat16_0.x;\n    u_xlat2.x = exp2(u_xlat2.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat2.x = u_xlat2.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat7 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat7 = float(1.0) / u_xlat7;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat7 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat7;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat2.xyz = u_xlat2.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat10_4.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat10_4.xyz * _Color.xyz;\n    u_xlat16_3.xyz = (-u_xlat10_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout mediump vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD0.xy = u_xlat0.xy;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Smoothness;\nuniform \tmediump vec4 _RimColor;\nuniform \tmediump float _RimMin;\nuniform \tmediump float _RimMax;\nuniform \tmediump vec4 _HColor;\nuniform \tmediump float _RampThreshold;\nuniform \tmediump float _RampSmooth;\nuniform \tmediump float _SpecSmooth;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump float u_xlat16_6;\nfloat u_xlat7;\nmediump float u_xlat16_15;\nmediump float u_xlat16_16;\nfloat u_xlat17;\nvoid main()\n{\n    u_xlat16_0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat16_0.x = inversesqrt(u_xlat16_0.x);\n    u_xlat16_0.xyz = u_xlat16_0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_15 = dot(u_xlat16_0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_15 = max(u_xlat16_15, 0.0);\n    u_xlat16_1.x = (-_RampSmooth) * 0.5 + _RampThreshold;\n    u_xlat16_15 = u_xlat16_15 + (-u_xlat16_1.x);\n    u_xlat16_6 = _RampSmooth * 0.5 + _RampThreshold;\n    u_xlat16_1.x = (-u_xlat16_1.x) + u_xlat16_6;\n    u_xlat16_1.x = float(1.0) / u_xlat16_1.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat16_15 * -2.0 + 3.0;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;\n    u_xlat16_1.xyz = vec3(u_xlat16_15) * _HColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat16_3.xyz = u_xlat2.xyz * vec3(u_xlat17) + _WorldSpaceLightPos0.xyz;\n    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;\n    u_xlat2.x = dot(u_xlat2.xyz, vs_TEXCOORD1.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat2.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_15 = u_xlat2.x + (-_RimMin);\n    u_xlat16_16 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);\n    u_xlat16_16 = inversesqrt(u_xlat16_16);\n    u_xlat16_3.xyz = vec3(u_xlat16_16) * u_xlat16_3.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_3.xyz);\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat2.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = _Smoothness * 128.0;\n    u_xlat2.x = u_xlat2.x * u_xlat16_0.x;\n    u_xlat2.x = exp2(u_xlat2.x);\n    u_xlat16_0.x = (-_SpecSmooth) * 0.5 + 0.5;\n    u_xlat2.x = u_xlat2.x * 2.0 + (-u_xlat16_0.x);\n    u_xlat16_5.x = _SpecSmooth * 0.5 + 0.5;\n    u_xlat7 = (-u_xlat16_0.x) + u_xlat16_5.x;\n    u_xlat7 = float(1.0) / u_xlat7;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat7 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat7;\n    u_xlat16_0.xyz = _LightColor0.xyz * _SpecColor.xyz;\n    u_xlat2.xyz = u_xlat2.xxx * u_xlat16_0.xyz;\n    u_xlat16_0.x = (-_RimMin) + _RimMax;\n    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_15;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_5.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_5.x;\n    u_xlat16_0.x = u_xlat16_0.x * _RimColor.w;\n    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;\n    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * _Color.xyz + _RimColor.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_0.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_TANGENT0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_TANGENT0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat6 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat6);\n    u_xlat0.y = fract(u_xlat6);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat6 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat6);\n    u_xlat0.y = fract(u_xlat6);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat6 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat6);\n    u_xlat0.y = fract(u_xlat6);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat6 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat6);\n    u_xlat0.y = fract(u_xlat6);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_NORMAL0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_TANGENT0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_TANGENT0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0 + _OutlineOffset;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = sqrt(u_xlat6);\n    u_xlat1.xyz = in_TANGENT0.xyz * vec3(_Outline);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _Outline;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_TANGENT0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_TANGENT0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1.xyz = in_POSITION0.xyz + _OutlineOffset.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_NORMAL0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_NORMAL0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_NORMAL0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.xyz = in_COLOR0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec4 in_TANGENT0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec4 in_TANGENT0;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec4 in_TANGENT0;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_TANGENT0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_TANGENT0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_TANGENT0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nlayout(location = 0) out highp vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = _OutlineColor;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nuniform lowp sampler2D _MainTex;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = texture2DLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _OutlineColor;\nvarying highp vec3 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tfloat _Outline;\nuniform \tfloat _ZSmooth;\nuniform \tmediump vec4 _OutlineOffset;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _TexLod;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 in_POSITION0;\nin highp vec3 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec3 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0.z = in_TEXCOORD1.y;\n    u_xlat9 = in_TEXCOORD1.x * 15.9375;\n    u_xlat0.x = floor(u_xlat9);\n    u_xlat0.y = fract(u_xlat9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.13333334, 2.13333344, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xy = u_xlat0.yy * hlslcc_mtx4x4unity_MatrixV[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[0].xy * u_xlat0.xx + u_xlat1.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[2].xy * u_xlat0.zz + u_xlat0.xy;\n    u_xlat0.xy = hlslcc_mtx4x4unity_MatrixV[3].xy * u_xlat0.ww + u_xlat0.xy;\n    u_xlat0.z = (-_ZSmooth);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(_Outline);\n    u_xlat1 = in_POSITION0 + _OutlineOffset;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * u_xlat1.www + u_xlat2.xyz;\n    u_xlat2 = u_xlat2 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat9 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat9 = sqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat2.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat2.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat2.www + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(0.00999999978, 0.00999999978, 0.00999999978) + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];\n    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4glstate_matrix_projection[3];\n    u_xlat0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = textureLod(_MainTex, u_xlat0.xy, _TexLod).xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _OutlineColor;\nin highp vec3 vs_TEXCOORD1;\nlayout(location = 0) out highp vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz;\n    u_xlat0.w = 1.0;\n    SV_Target0 = u_xlat0 * _OutlineColor;\n    return;\n}\n\n"]